- id: stephen-deepgreen
  title: "Deep Green: Modelling Time-Series of Software Energy Consumption"
  presenter: Stephen Romansky
  date: 2018-01-31 13:00:00
  abstract: Inefficient mobile software kills battery life. Yet, developers lack the tools necessary to detect and solve energy bugs in software. In addition, developers are usually tasked with the creation of software features and triaging existing bugs. This means that most developers do not have the time or resources to research, build, or employ energy debugging tools.  We present a new method for predicting software energy consumption to help debug software energy issues. Our approach enables developers to align traces of software behavior with traces of software energy consumption. This allows developers to match run-time energy hot spots to the corresponding execution. We accomplish this by applying recent neural network models to predict time series of energy consumption given a softwareâ€™s behavior. We compare our time series models to prior state-of-the-art models that only predict total software energy consumption. We found that machine learning based time series based models, and LSTM based time series based models, can often be more accurate at predicting instantaneous power use and total energy consumption.

- id: erick-inliner
  title: Using Static Information to Improve Inlining Decisions
  presenter: Erick Ochoa
  date: 2018-01-31 13:30:00
  abstract: Function inlining is a well known technique for speeding up programs. By eliminating the need of pushing/popping arguments into/from the stack, function inlining can decrease the execution time of function calls. Time savings add up quickly when function inlining is applied to frequently visited call sites. Under this logic, the optimal decision is to apply function inlining to call sites that are visited the most. However, time savings obtained from these benefits are often overshadowed by those obtained by enabling other compiler optimization. After a function is inlined, its body is available in the caller's context and we say that the function has been specialized to its calling context. This suggests that call frequency should not be the only deciding factor in inlining. Static information that allows the compiler to perform other optimizations safely should also be taken into account. In this talk, we will go over how abstract interpretation can be used to safely estimate other compiler optimizations and how this can improve inlining decision.

- id: eddie-syntax
  title: "Syntax and Sensibility: Using language models to detect"
  presenter: Eddie Santos
  date: 2018-01-17 13:00:00
  abstract: Syntax errors are made by novice and experienced programmers alike; however, novice programmers lack the years of experience that help them quickly resolve these frustrating errors. Standard LR parsers are of little help, typically resolving syntax errors and their precise location poorly. We propose a methodology that locates where syntax errors occur, and suggests possible changes to the token stream that can fix the error identified. This methodology finds syntax errors by using language models trained on correct source code to find tokens that seem out of place. Fixes are synthesized by consulting the language models to determine what tokens are more likely at the estimated error location. We compare n-gram and LSTM (Long short-term memory) language models for this task, each trained on a large corpus of Java code collected from GitHub. Unlike prior work, our methodology does not rely that the problem source code comes from the same domain as the training data. We evaluated against a repository of real student mistakes. Our tools are able to find a syntactically-valid fix within its top 2 suggestions, often producing the exact fix that the student used to resolve the error. The results show that this tool and methodology can locate and suggest corrections for syntax errors. Our methodology is of practical use to all programmers, but will be especially useful to novices frustrated with incomprehensible syntax errors.

- id: fernando-libs
  title: Metric-Based Comparison of Software Libraries
  presenter: Fernando Lopez de la Mora
  date: 2018-01-17 13:30:00
  abstract: Software libraries ease development tasks by allowing client developers to reuse code written by third parties. To perform a specific task, there is usually a large number of libraries that offer the desired functionality. Unfortunately, selecting the appropriate library to use is not straightforward since developers are often unaware of the advantages and disadvantages of each library, and may also care about different characteristics in different situations. We introduce the idea of using software metrics to help developers choose the libraries most suited to their needs. We created library comparisons based on several metrics extracted from multiple sources such as software repositories, issue tracking systems, and Q&A websites. By consolidating all of this information in a single website, we enable developers to make informed decisions by comparing metric data belonging to libraries from several domains.
